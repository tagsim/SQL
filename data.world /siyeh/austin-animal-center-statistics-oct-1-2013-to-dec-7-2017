--excluding of column:

SELECT * EXCLUDE animal_id
  FROM austin_animal_center_intakes;

--renaming of column:
  SELECT * RENAME found_location AS found_at
  FROM austin_animal_center_intakes

--exclude must precede rename when used together:
SELECT * EXCLUDE animal_id RENAME age_upon_intake AS age
FROM austin_animal_center_intakes;

--selecting last 15 rows in the table:
SELECT *
FROM austin_animal_center_intakes
ORDER BY animal_id DESC
LIMIT 15;

--where and comparison operator clauses to filter dataset:
SELECT year,
        month,
        animal_type,
        count
   FROM austin_animal_center_intakes_by_month
  WHERE COUNT > 1000
  AND animal_type = 'Dog';

SELECT year,
        month,
        animal_type,
        count
   FROM austin_animal_center_intakes_by_month
  WHERE COUNT > 900
  AND animal_type != 'Dog';

--EXERCISE 5: Using the description column in the allergies table, write a query that returns all of the patients with an allergy to mould.
SELECT *
FROM allergies
WHERE allergies.description = 'Allergy to mould';

--85 patients with allergy to mould:

SELECT COUNT(*)
FROM allergies
WHERE allergies.description = 'Allergy to mould';

--Using the column occurrences from the all_prevalences table, write a query that shows all of the conditions that show up more than 100 times in your data.

SELECT * 
FROM all_prevalences
WHERE occurrences > 100;

--Order by clause, order dataset by Year (asc/default) and Month (desc): 

SELECT year,
       month,
       count,
       animal_type
  FROM austin_animal_center_intakes_by_month
 WHERE animal_type = "Cat"
 ORDER BY year, month DESC;

--Altering a table, creating new column:
ALTER TABLE employee
ADD COLUMN email VARCHAR(50);


--Update rows, following new column creation:
UPDATE customers
SET email = 'Ffish@gmail.com
WHERE id = 1;

-- IS NULL/NOT NULL

SELECT monthyear,
       animal_type,
       outcome_type,
       outcome_subtype,
       breed
  FROM austin_animal_center_outcomes
 WHERE outcome_subtype IS NOT NULL
 AND breed IS NOT NULL;

--Exercise 14: Using the patient, description, and reasondescription columns from the medications table, write a query that returns the records where reasondescription is not null.

SELECT patient, 
      description,
      reasondescription
FROM medications
WHERE reasondescription IS NOT NULL;

--Exercise 15: Write a query against the medications table that returns all of the patients who were given some form of Acetaminophen, what they were given, and the reason they were given it.

SELECT patient,
      description,
      reasondescription
FROM medications
WHERE description LIKE "%Acetaminophen%";

--Exercise 16: Use the query you just wrote to return the same columns but leave out the results of Acetaminophen with either hydrocodone or oxycodone in them. Sort your results by dose, highest to lowest.

SELECT patient,
      description,
      reasondescription
FROM medications
WHERE description LIKE "%Acetaminophen%"
AND description NOT LIKE "%codone%";

--BETWEEN 

--Exercise 16: Using the patient, description and value columns in the observations table, write a query that returns all the patients expected to have between one and five quality years of life left.

SELECT patient,
        description,
        value
FROM observations
WHERE description = "Quality adjusted life years"
AND value BETWEEN 1 AND 5;

--OFFSET: Detmining the rows to skip 

SELECT *
FROM observations
LIMIT 10
OFFSET 10;
